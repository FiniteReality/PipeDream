<Grammar>

  <Node Type="PrefixUnaryExpressionSyntax" Base="ExpressionSyntax">
    <Comment>
      <summary>
        Defines a record representing a prefix unary expression.
      </summary>
    </Comment>

    <Kind Name="BitwiseNotExpression" />
    <Kind Name="LogicalNotExpression" />
    <Kind Name="UnaryMinusExpression" />
    <Kind Name="PreIncrementExpression" />
    <Kind Name="PreDecrementExpression" />
    <Kind Name="DereferenceExpression" />
    <Kind Name="AddressOfExpression" />

    <Member Name="OperatorToken" Type="SyntaxToken">
      <Comment>
        <summary>
          Gets the <see cref="SyntaxToken" /> representing the kind of operator
          of the prefix unary expression.
        </summary>
      </Comment>

      <Kind Name="ExclamationToken" />
      <Kind Name="TildeToken" />
      <Kind Name="MinusToken" />
      <Kind Name="PlusPlusToken" />
      <Kind Name="MinusMinusToken" />
      <Kind Name="AsteriskToken" />
      <Kind Name="AmpersandToken" />
    </Member>

    <Member Name="Operand" Type="ExpressionSyntax">
      <Comment>
        <summary>
          Gets the <see cref="ExpressionSyntax" /> representing the operand of
          the prefix unary expression.
        </summary>
      </Comment>
    </Member>
  </Node>

  <Node Type="PostfixUnaryExpressionSyntax" Base="ExpressionSyntax">
    <Comment>
      <summary>
        Defines a record representing a postfix unary expression.
      </summary>
    </Comment>

    <Kind Name="PostIncrementExpression" />
    <Kind Name="PostDecrementExpression" />

    <Member Name="Operand" Type="ExpressionSyntax">
      <Comment>
        <summary>
          Gets the <see cref="ExpressionSyntax" /> representing the operand of
          the postfix unary expression.
        </summary>
      </Comment>
    </Member>
    <Member Name="OperatorToken" Type="SyntaxToken">
      <Comment>
        <summary>
          Gets the <see cref="ExpressionSyntax" /> representing the operand of
          the postfix unary expression.
        </summary>
      </Comment>

      <Kind Name="PlusPlusToken" />
      <Kind Name="MinusMinusToken" />
    </Member>
  </Node>

  <Node Type="BinaryExpressionSyntax" Base="ExpressionSyntax">
    <Comment>
      <summary>
        Defines a record representing a binary expression.
      </summary>
    </Comment>

    <Kind Name="ExponentiationExpression" />

    <Kind Name="MultiplyExpression" />
    <Kind Name="DivideExpression" />
    <Kind Name="IntegerModuloExpression" />
    <Kind Name="FloatModuloExpression" />

    <Kind Name="AddExpression" />
    <Kind Name="SubtractExpression" />

    <Kind Name="LessThanExpression" />
    <Kind Name="LessThanOrEqualExpression" />
    <Kind Name="GreaterThanExpression" />
    <Kind Name="GreaterThanOrEqualExpression" />

    <Kind Name="LeftShiftExpression" />
    <Kind Name="RightShiftExpression" />

    <Kind Name="EqualsExpression" />
    <Kind Name="NotEqualsExpression" />
    <Kind Name="EquivalentExpression" />
    <Kind Name="NotEquivalentExpression" />

    <Kind Name="BitwiseAndExpression" />
    <Kind Name="ExclusiveOrExpression" />
    <Kind Name="BitwiseOrExpression" />

    <Kind Name="LogicalAndExpression" />
    <Kind Name="LogicalOrExpression" />

    <Kind Name="InExpression" />

    <Member Name="Left" Type="ExpressionSyntax">
      <Comment>
        <summary>
          Gets the <see cref="ExpressionSyntax" /> node representing the
          expression on the left of the binary operator.
        </summary>
      </Comment>
    </Member>
    <Member Name="OperatorToken" Type="SyntaxToken">
      <Comment>
        <summary>
          Gets the <see cref="SyntaxToken" /> representing the kind of operator
          in the member access expression.
        </summary>
      </Comment>

      <Kind Name="AsteriskAsteriskToken" />

      <Kind Name="AsteriskToken" />
      <Kind Name="SlashToken" />
      <Kind Name="PercentToken" />
      <Kind Name="PercentPercentToken" />

      <Kind Name="PlusToken" />
      <Kind Name="MinusToken" />

      <Kind Name="LessThanToken" />
      <Kind Name="LessThanEqualsToken" />
      <Kind Name="GreaterThanToken" />
      <Kind Name="GreaterThanEqualsToken" />

      <Kind Name="LessThanLessThanToken" />
      <Kind Name="GreaterThanGreaterThanToken" />

      <Kind Name="EqualsEqualsToken" />
      <Kind Name="ExclamationEqualsToken" />
      <Kind Name="LessThanGreaterThanToken" />
      <Kind Name="TildeEqualsToken" />
      <Kind Name="TildeExclamationToken" />

      <Kind Name="AmpersandToken" />
      <Kind Name="CaretToken" />
      <Kind Name="BarToken" />

      <Kind Name="AmpersandAmpersandToken" />
      <Kind Name="BarBarToken" />

      <Kind Name="InKeyword" />
    </Member>
    <Member Name="Right" Type="ExpressionSyntax">
      <Comment>
        <summary>
          Gets the <see cref="ExpressionSyntax" /> node representing the
          expression on the right of the binary operator.
        </summary>
      </Comment>
    </Member>
  </Node>

  <Node Type="ConditionalExpressionSyntax" Base="ExpressionSyntax">
    <Comment>
      <summary>
        Defines a record representing a ternary expression.
      </summary>
    </Comment>

    <Kind Name="ConditionalExpression" />

    <Member Name="Condition" Type="ExpressionSyntax">
      <Comment>
        <summary>
          Gets the <see cref="ExpressionSyntax" /> node representing the
          condition of the conditional expression.
        </summary>
      </Comment>
    </Member>
    <Member Name="QuestionToken" Type="SyntaxToken">
      <Kind Name="QuestionToken" />
      <Comment>
        <summary>
          Gets the <see cref="SyntaxToken" /> representing the question mark.
        </summary>
      </Comment>
    </Member>
    <Member Name="WhenTrue" Type="ExpressionSyntax">
      <Comment>
        <summary>
          Gets the <see cref="ExpressionSyntax" /> node representing the
          expression to be evaluated when the condition is true.
        </summary>
      </Comment>
    </Member>
    <Member Name="ColonToken" Type="SyntaxToken">
      <Kind Name="ColonToken" />
      <Comment>
        <summary>
          Gets the <see cref="SyntaxToken" /> representing the colon.
        </summary>
      </Comment>
    </Member>
    <Member Name="WhenFalse" Type="ExpressionSyntax">
      <Comment>
        <summary>
          Gets the <see cref="ExpressionSyntax" /> node representing the
          expression to be evaluated when the condition is false.
        </summary>
      </Comment>
    </Member>
  </Node>

  <Node Type="AssignmentExpressionSyntax" Base="ExpressionSyntax">
    <Comment>
      <summary>
        Defines a record representing an assignment expression.
      </summary>
    </Comment>

    <Kind Name="SimpleAssignmentExpression" />
    <Kind Name="AddAssignmentExpression" />
    <Kind Name="SubtractAssignmentExpression" />
    <Kind Name="MultiplyAssignmentExpression" />
    <Kind Name="DivideAssignmentExpression" />
    <Kind Name="IntegerModuloAssignmentExpression" />
    <Kind Name="FloatModuloAssignmentExpression" />
    <Kind Name="BitwiseAndAssignmentExpression" />
    <Kind Name="BitwiseOrAssignmentExpression" />
    <Kind Name="ExclusiveOrAssignmentExpression" />
    <Kind Name="LeftShiftAssignmentExpression" />
    <Kind Name="RightShiftAssignmentExpression" />
    <Kind Name="DestructureAssignmentExpression" />
    <Kind Name="LogicalAndAssignmentExpression" />
    <Kind Name="LogicalOrAssignmentExpression" />

    <Member Name="Left" Type="ExpressionSyntax">
      <Comment>
        <summary>
          Gets the expression on the left of the assignment operator.
        </summary>
      </Comment>
    </Member>

    <Member Name="OperatorToken" Type="SyntaxToken">
      <Comment>
        <summary>
          Gets the token representing the operator of the assignment expression.
        </summary>
      </Comment>

      <Kind Name="EqualsToken" />
      <Kind Name="PlusEqualsToken" />
      <Kind Name="MinusEqualsToken" />
      <Kind Name="AsteriskEqualsToken" />
      <Kind Name="SlashEqualsToken" />
      <Kind Name="PercentEqualsToken" />
      <Kind Name="PercentPercentEqualsToken" />
      <Kind Name="AmpersandEqualsToken" />
      <Kind Name="BarEqualsToken" />
      <Kind Name="CaretEqualsToken" />
      <Kind Name="LessThanLessThanEqualsToken" />
      <Kind Name="GreaterThanGreaterThanEqualsToken" />
      <Kind Name="ColonEqualsToken" />
      <Kind Name="AmpersandAmpersandEqualsToken" />
      <Kind Name="BarBarEqualsToken" />
    </Member>

    <Member Name="Right" Type="ExpressionSyntax">
      <Comment>
        <summary>
          Gets the expression on the right of the assignment operator.
        </summary>
      </Comment>
    </Member>
  </Node>

  <Node Type="QualifiedNameSyntax" Base="NameSyntax">
    <Comment>
      <summary>
        Defines a record representing a qualified name.
      </summary>
    </Comment>

    <Kind Name="QualifiedName" />

    <Member Name="Parts" Type="SeparatedSyntaxList&lt;NameSyntax&gt;">
      <Comment>
        <summary>
          Gets the parts of this qualified name.
        </summary>
      </Comment>
    </Member>
  </Node>

  <Node Type="SimpleNameSyntax" Base="NameSyntax">
    <Comment>
      <summary>
        Defines a record representing a simple name.
      </summary>
    </Comment>

    <Kind Name="SimpleName" />

    <Member Name="Name" Type="SyntaxToken">
      <Comment>
        <summary>
          Gets the syntax token representing the identifier of this name.
        </summary>
      </Comment>

      <Kind Name="IdentifierToken" />
      <Kind Name="DefineKeyword" />
      <Kind Name="ElifKeyword" />
      <Kind Name="EndIfKeyword" />
      <Kind Name="ErrorKeyword" />
      <Kind Name="IfDefKeyword" />
      <Kind Name="IfNDefKeyword" />
      <Kind Name="IncludeKeyword" />
      <Kind Name="PipeDreamKeyword" />
      <Kind Name="PragmaKeyword" />
      <Kind Name="UndefKeyword" />
      <Kind Name="WarnKeyword" />
      <Kind Name="NewKeyword" />
      <Kind Name="VarKeyword" />
      <Kind Name="ConstKeyword" />
      <Kind Name="FinalKeyword" />
      <Kind Name="GlobalKeyword" />
      <Kind Name="OperatorKeyword" />
      <Kind Name="TmpKeyword" />
      <Kind Name="VerbKeyword" />
      <Kind Name="AreaKeyword" />
      <Kind Name="AtomKeyword" />
      <Kind Name="ClientKeyword" />
      <Kind Name="DatabaseKeyword" />
      <Kind Name="DatumKeyword" />
      <Kind Name="IconKeyword" />
      <Kind Name="ImageKeyword" />
      <Kind Name="ListKeyword" />
      <Kind Name="MatrixKeyword" />
      <Kind Name="MobKeyword" />
      <Kind Name="MutableAppearanceKeyword" />
      <Kind Name="ObjKeyword" />
      <Kind Name="ProcKeyword" />
      <Kind Name="RegexKeyword" />
      <Kind Name="SoundKeyword" />
      <Kind Name="TextKeyword" />
      <Kind Name="TurfKeyword" />
      <Kind Name="WorldKeyword" />
    </Member>
  </Node>

  <Node Type="RootedNameSyntax" Base="NameSyntax">
    <Comment>
      <summary>
        Defines a record representing a rooted name.
      </summary>
    </Comment>

    <Kind Name="RootedName" />

    <Member Name="PathRootToken" Type="SyntaxToken">
      <Comment>
        <summary>
          Gets the syntax token representing the path root token.
        </summary>
      </Comment>

      <Kind Name="SlashToken" />
    </Member>

    <Member Name="Name" Type="SyntaxToken">
      <Comment>
        <summary>
          Gets the syntax token representing the identifier of this name.
        </summary>
      </Comment>

      <Kind Name="IdentifierToken" />
      <Kind Name="DefineKeyword" />
      <Kind Name="ElifKeyword" />
      <Kind Name="EndIfKeyword" />
      <Kind Name="ErrorKeyword" />
      <Kind Name="IfDefKeyword" />
      <Kind Name="IfNDefKeyword" />
      <Kind Name="IncludeKeyword" />
      <Kind Name="PipeDreamKeyword" />
      <Kind Name="PragmaKeyword" />
      <Kind Name="UndefKeyword" />
      <Kind Name="WarnKeyword" />
      <Kind Name="NewKeyword" />
      <Kind Name="VarKeyword" />
      <Kind Name="ConstKeyword" />
      <Kind Name="FinalKeyword" />
      <Kind Name="GlobalKeyword" />
      <Kind Name="OperatorKeyword" />
      <Kind Name="TmpKeyword" />
      <Kind Name="VerbKeyword" />
      <Kind Name="AreaKeyword" />
      <Kind Name="AtomKeyword" />
      <Kind Name="ClientKeyword" />
      <Kind Name="DatabaseKeyword" />
      <Kind Name="DatumKeyword" />
      <Kind Name="IconKeyword" />
      <Kind Name="ImageKeyword" />
      <Kind Name="ListKeyword" />
      <Kind Name="MatrixKeyword" />
      <Kind Name="MobKeyword" />
      <Kind Name="MutableAppearanceKeyword" />
      <Kind Name="ObjKeyword" />
      <Kind Name="ProcKeyword" />
      <Kind Name="RegexKeyword" />
      <Kind Name="SoundKeyword" />
      <Kind Name="TextKeyword" />
      <Kind Name="TurfKeyword" />
      <Kind Name="WorldKeyword" />
    </Member>
  </Node>

  <Node Type="NewExpressionSyntax" Base="ExpressionSyntax">
    <Comment>
      <summary>
        Defines a record representing a <c>new</c> expression.
      </summary>
    </Comment>

    <Kind Name="NewExpression" />

    <Member Name="NewKeyword" Type="SyntaxToken">
      <Comment>
        <summary>
          Gets the <c>new</c> keyword.
        </summary>
      </Comment>

      <Kind Name="NewKeyword" />
    </Member>

    <Member Name="Type" Type="NameSyntax?">
      <Comment>
        <summary>
          Gets the type to instantiate.
        </summary>
      </Comment>
    </Member>

    <!-- TODO: argument list -->
  </Node>

  <Node Type="PreprocessorExpressionSyntax" Base="ExpressionSyntax">
    <Comment>
      <summary>
        Defines a record representing preprocessor directives which can produce
        an expression.
      </summary>
    </Comment>

    <Kind Name="PreprocessorExpression" />
  </Node>
</Grammar>
