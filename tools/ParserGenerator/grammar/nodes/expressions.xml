<Grammar>

  <Node Type="PrefixUnaryExpressionSyntax" Base="ExpressionSyntax">
    <Comment>
      <summary>
        Defines a record representing a prefix unary expression.
      </summary>
    </Comment>

    <Kind Name="BitwiseNotExpression" />
    <Kind Name="LogicalNotExpression" />
    <Kind Name="UnaryMinusExpression" />
    <Kind Name="PreIncrementExpression" />
    <Kind Name="PreDecrementExpression" />
    <Kind Name="DereferenceExpression" />
    <Kind Name="AddressOfExpression" />

    <Member Name="OperatorToken" Type="SyntaxToken">
      <Comment>
        <summary>
          Gets the <see cref="SyntaxToken" /> representing the kind of operator
          of the prefix unary expression.
        </summary>
      </Comment>
    </Member>
    <Member Name="Operand" Type="ExpressionSyntax">
      <Comment>
        <summary>
          Gets the <see cref="ExpressionSyntax" /> representing the operand of
          the prefix unary expression.
        </summary>
      </Comment>

      <Kind Name="ExclamationToken" />
      <Kind Name="TildeToken" />
      <Kind Name="MinusToken" />
      <Kind Name="PlusPlusToken" />
      <Kind Name="MinusMinusToken" />
      <Kind Name="AsteriskToken" />
      <Kind Name="AmpersandToken" />
    </Member>
  </Node>

  <Node Type="PostfixUnaryExpressionSyntax" Base="ExpressionSyntax">
    <Comment>
      <summary>
        Defines a record representing a postfix unary expression.
      </summary>
    </Comment>

    <Kind Name="PostIncrementExpression" />
    <Kind Name="PostDecrementExpression" />

    <Member Name="Operand" Type="ExpressionSyntax">
      <Comment>
        <summary>
          Gets the <see cref="ExpressionSyntax" /> representing the operand of
          the postfix unary expression.
        </summary>
      </Comment>
    </Member>
    <Member Name="OperatorToken" Type="SyntaxToken">
      <Comment>
        <summary>
          Gets the <see cref="ExpressionSyntax" /> representing the operand of
          the postfix unary expression.
        </summary>
      </Comment>

      <Kind Name="PlusPlusToken" />
      <Kind Name="MinusMinusToken" />
    </Member>
  </Node>

  <Node Type="BinaryExpressionSyntax" Base="ExpressionSyntax">
    <Comment>
      <summary>
        Defines a record representing a binary expression.
      </summary>
    </Comment>

    <Kind Name="ExponentiationExpression" />

    <Kind Name="MultiplyExpression" />
    <Kind Name="DivideExpression" />
    <Kind Name="IntegerModuloExpression" />
    <Kind Name="FloatModuloExpression" />

    <Kind Name="AddExpression" />
    <Kind Name="SubtractExpression" />

    <Kind Name="LessThanExpression" />
    <Kind Name="LessThanOrEqualExpression" />
    <Kind Name="GreaterThanExpression" />
    <Kind Name="GreaterThanOrEqualExpression" />

    <Kind Name="LeftShiftExpression" />
    <Kind Name="RightShiftExpression" />

    <Kind Name="EqualsExpression" />
    <Kind Name="NotEqualsExpression" />
    <Kind Name="EquivalentExpression" />
    <Kind Name="NotEquivalentExpression" />

    <Kind Name="BitwiseAndExpression" />
    <Kind Name="ExclusiveOrExpression" />
    <Kind Name="BitwiseOrExpression" />

    <Kind Name="LogicalAndExpression" />
    <Kind Name="LogicalOrExpression" />

    <Kind Name="InExpression" />

    <Member Name="Left" Type="ExpressionSyntax">
      <Comment>
        <summary>
          Gets the <see cref="ExpressionSyntax" /> node representing the
          expression on the left of the binary operator.
        </summary>
      </Comment>
    </Member>
    <Member Name="OperatorToken" Type="SyntaxToken">
      <Comment>
        <summary>
          Gets the <see cref="SyntaxToken" /> representing the kind of operator
          in the member access expression.
        </summary>
      </Comment>

      <Kind Name="AsteriskAsteriskToken" />

      <Kind Name="AsteriskToken" />
      <Kind Name="SlashToken" />
      <Kind Name="PercentToken" />
      <Kind Name="PercentPercentToken" />

      <Kind Name="PlusToken" />
      <Kind Name="MinusToken" />

      <Kind Name="LessThanToken" />
      <Kind Name="LessThanEqualsToken" />
      <Kind Name="GreaterThanToken" />
      <Kind Name="GreaterThanEqualsToken" />

      <Kind Name="LessThanLessThanToken" />
      <Kind Name="GreaterThanGreaterThanToken" />

      <Kind Name="EqualsEqualsToken" />
      <Kind Name="ExclamationEqualsToken" />
      <Kind Name="LessThanGreaterThanToken" />
      <Kind Name="TildeEqualsToken" />
      <Kind Name="TildeExclamationToken" />

      <Kind Name="AmpersandToken" />
      <Kind Name="CaretToken" />
      <Kind Name="BarToken" />

      <Kind Name="AmpersandAmpersandToken" />
      <Kind Name="BarBarToken" />

      <Kind Name="InKeyword" />
    </Member>
    <Member Name="Right" Type="ExpressionSyntax">
      <Comment>
        <summary>
          Gets the <see cref="ExpressionSyntax" /> node representing the
          expression on the right of the binary operator.
        </summary>
      </Comment>
    </Member>
  </Node>

  <Node Type="ConditionalExpressionSyntax" Base="ExpressionSyntax">
    <Comment>
      <summary>
        Defines a record representing a ternary expression.
      </summary>
    </Comment>

    <Kind Name="ConditionalExpression" />

    <Member Name="Condition" Type="ExpressionSyntax">
      <Comment>
        <summary>
          Gets the <see cref="ExpressionSyntax" /> node representing the
          condition of the conditional expression.
        </summary>
      </Comment>
    </Member>
    <Member Name="QuestionToken" Type="SyntaxToken">
      <Kind Name="QuestionToken" />
      <Comment>
        <summary>
          Gets the <see cref="SyntaxToken" /> representing the question mark.
        </summary>
      </Comment>
    </Member>
    <Member Name="WhenTrue" Type="ExpressionSyntax">
      <Comment>
        <summary>
          Gets the <see cref="ExpressionSyntax" /> node representing the
          expression to be evaluated when the condition is true.
        </summary>
      </Comment>
    </Member>
    <Member Name="ColonToken" Type="SyntaxToken">
      <Kind Name="ColonToken" />
      <Comment>
        <summary>
          Gets the <see cref="SyntaxToken" /> representing the colon.
        </summary>
      </Comment>
    </Member>
    <Member Name="WhenFalse" Type="ExpressionSyntax">
      <Comment>
        <summary>
          Gets the <see cref="ExpressionSyntax" /> node representing the
          expression to be evaluated when the condition is false.
        </summary>
      </Comment>
    </Member>
  </Node>

</Grammar>