<Grammar>
  <KindDef Name="BitwiseNotExpression" Group="Expression">
    <Comment>
      <summary>
        A bitwise not <see cref="PrefixUnaryExpressionSyntax" />.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="LogicalNotExpression" Group="Expression">
    <Comment>
      <summary>
        A logical not <see cref="PrefixUnaryExpressionSyntax" />.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="UnaryMinusExpression" Group="Expression">
    <Comment>
      <summary>
        A unary minus <see cref="PrefixUnaryExpressionSyntax" />.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="PreIncrementExpression" Group="Expression">
    <Comment>
      <summary>
        A pre-increment <see cref="PrefixUnaryExpressionSyntax" />.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="PreDecrementExpression" Group="Expression">
    <Comment>
      <summary>
        A pre-decrement <see cref="PrefixUnaryExpressionSyntax" />.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="DereferenceExpression" Group="Expression">
    <Comment>
      <summary>
        A dereference <see cref="PrefixUnaryExpressionSyntax" />.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="AddressOfExpression" Group="Expression">
    <Comment>
      <summary>
        An address-of <see cref="PrefixUnaryExpressionSyntax" />.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="ExclamationToken" Group="Token">
    <Comment>
      <summary>
        Represents the <c>!</c> token.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="TildeToken" Group="Token">
    <Comment>
      <summary>
        Represents the <c>~</c> token.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="MinusToken" Group="Token">
    <Comment>
      <summary>
        Represents the <c>-</c> token.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="PlusPlusToken" Group="Token">
    <Comment>
      <summary>
        Represents the <c>++</c> token.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="MinusMinusToken" Group="Token">
    <Comment>
      <summary>
        Represents the <c>--</c> token.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="AsteriskToken" Group="Token">
    <Comment>
      <summary>
        Represents the <c>*</c> token.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="AmpersandToken" Group="Token">
    <Comment>
      <summary>
        Represents the <c>&amp;</c> token.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="PostDecrementExpression" Group="Expression">
    <Comment>
      <summary>
        A post-decrement <see cref="PostfixUnaryExpressionSyntax" />.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="PostIncrementExpression" Group="Expression">
    <Comment>
      <summary>
        A post-increment <see cref="PostfixUnaryExpressionSyntax" />.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="ExponentiationExpression" Group="Expression">
    <Comment>
      <summary>
        An exponentiation <see cref="BinaryExpressionSyntax" />.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="MultiplyExpression" Group="Expression">
    <Comment>
      <summary>
        A multiply <see cref="BinaryExpressionSyntax" />.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="DivideExpression" Group="Expression">
    <Comment>
      <summary>
        A divide <see cref="BinaryExpressionSyntax" />.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="IntegerModuloExpression" Group="Expression">
    <Comment>
      <summary>
        An integer modulo <see cref="BinaryExpressionSyntax" />.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="FloatModuloExpression" Group="Expression">
    <Comment>
      <summary>
        A float modulo <see cref="BinaryExpressionSyntax" />.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="AddExpression" Group="Expression">
    <Comment>
      <summary>
        An addition <see cref="BinaryExpressionSyntax" />.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="SubtractExpression" Group="Expression">
    <Comment>
      <summary>
        A subtraction <see cref="BinaryExpressionSyntax" />.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="LessThanExpression" Group="Expression">
    <Comment>
      <summary>
        A less-than <see cref="BinaryExpressionSyntax" />.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="LessThanOrEqualExpression" Group="Expression">
    <Comment>
      <summary>
        A less-than-or-equal <see cref="BinaryExpressionSyntax" />.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="GreaterThanExpression" Group="Expression">
    <Comment>
      <summary>
        A greater-than <see cref="BinaryExpressionSyntax" />.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="GreaterThanOrEqualExpression" Group="Expression">
    <Comment>
      <summary>
        A greater-than-or-equal <see cref="BinaryExpressionSyntax" />.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="LeftShiftExpression" Group="Expression">
    <Comment>
      <summary>
        A left-shift <see cref="BinaryExpressionSyntax" />.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="RightShiftExpression" Group="Expression">
    <Comment>
      <summary>
        A right-shift <see cref="BinaryExpressionSyntax" />.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="EqualsExpression" Group="Expression">
    <Comment>
      <summary>
        An equality <see cref="BinaryExpressionSyntax" />.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="NotEqualsExpression" Group="Expression">
    <Comment>
      <summary>
        An inequality <see cref="BinaryExpressionSyntax" />.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="EquivalentExpression" Group="Expression">
    <Comment>
      <summary>
        An equivalency <see cref="BinaryExpressionSyntax" />.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="NotEquivalentExpression" Group="Expression">
    <Comment>
      <summary>
        An inequivalency <see cref="BinaryExpressionSyntax" />.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="BitwiseAndExpression" Group="Expression">
    <Comment>
      <summary>
        A bitwise and <see cref="BinaryExpressionSyntax" />.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="ExclusiveOrExpression" Group="Expression">
    <Comment>
      <summary>
        An exclusive or <see cref="BinaryExpressionSyntax" />.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="BitwiseOrExpression" Group="Expression">
    <Comment>
      <summary>
        A bitwise or <see cref="BinaryExpressionSyntax" />.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="LogicalAndExpression" Group="Expression">
    <Comment>
      <summary>
        A logical and <see cref="BinaryExpressionSyntax" />.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="LogicalOrExpression" Group="Expression">
    <Comment>
      <summary>
        A logical or <see cref="BinaryExpressionSyntax" />.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="InExpression" Group="Expression">
    <Comment>
      <summary>
        A <c>in</c> <see cref="BinaryExpressionSyntax" />.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="AsteriskAsteriskToken" Group="Token">
    <Comment>
      <summary>
        Represents the <c>**</c> token.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="SlashToken" Group="Token">
    <Comment>
      <summary>
        Represents the <c>//</c> token.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="PercentToken" Group="Token">
    <Comment>
      <summary>
        Represents the <c>%</c> token.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="PercentPercentToken" Group="Token">
    <Comment>
      <summary>
        Represents the <c>%%</c> token.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="PlusToken" Group="Token">
    <Comment>
      <summary>
        Represents the <c>+</c> token.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="LessThanToken" Group="Token">
    <Comment>
      <summary>
        Represents the <c>&lt;</c> token.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="LessThanEqualsToken" Group="Token">
    <Comment>
      <summary>
        Represents the <c>&lt;=</c> token.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="GreaterThanToken" Group="Token">
    <Comment>
      <summary>
        Represents the <c>&gt;</c> token.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="GreaterThanEqualsToken" Group="Token">
    <Comment>
      <summary>
        Represents the <c>&gt;=</c> token.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="DoubleLessThanToken" Group="Token">
    <Comment>
      <summary>
        Represents the <c>&lt;&lt;</c> token.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="DoubleGreaterThanToken" Group="Token">
    <Comment>
      <summary>
        Represents the <c>&gt;&gt;</c> token.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="DoubleEqualsToken" Group="Token">
    <Comment>
      <summary>
        Represents the <c>==</c> token.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="ExclamationEqualsToken" Group="Token">
    <Comment>
      <summary>
        Represents the <c>!=</c> token.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="LessThanGreaterThanToken" Group="Token">
    <Comment>
      <summary>
        Represents the <c>&lt;&gt;</c> token.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="TildeEqualsToken" Group="Token">
    <Comment>
      <summary>
        Represents the <c>~=</c> token.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="TildeExclamationToken" Group="Token">
    <Comment>
      <summary>
        Represents the <c>~!</c> token.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="CaretToken" Group="Token">
    <Comment>
      <summary>
        Represents the <c>^</c> token.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="BarToken" Group="Token">
    <Comment>
      <summary>
        Represents the <c>|</c> token.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="DoubleAmpersandToken" Group="Token">
    <Comment>
      <summary>
        Represents the <c>&amp;&amp;</c> token.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="DoubleBarToken" Group="Token">
    <Comment>
      <summary>
        Represents the <c>||</c> token.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="InKeyword" Group="Keyword">
    <Comment>
      <summary>
        Represents the <c>in</c> keyword.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="ConditionalExpression" Group="Expression">
    <Comment>
      <summary>
        A ternary <see cref="ConditionalExpressionSyntax" />.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="QuestionToken" Group="Token">
    <Comment>
      <summary>
        Represents the <c>?</c> token.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="ColonToken" Group="Token">
    <Comment>
      <summary>
        Represents the <c>:</c> token.
      </summary>
    </Comment>
  </KindDef>
  <KindDef Name="CompilationUnit" Group="Block">
    <Comment>
      <summary>
        An entire compilation unit.
      </summary>
      <seealso cref="CompilationUnitSyntax" />
    </Comment>
  </KindDef>

  <RootNode Type="SyntaxNode">
    <Comment>
      <summary>
        Defines a record from which all syntax nodes are derived.
      </summary>
    </Comment>
    <Member Name="Kind" Type="SyntaxKind">
      <Comment>
        <summary>
          Gets the kind of this syntax node.
        </summary>
      </Comment>
    </Member>
    <Member Name="Span" Type="SyntaxSpan">
      <Comment>
        <summary>
          Gets the absolute span of this node, not including trivia.
        </summary>
      </Comment>
    </Member>
    <Member Name="LeadingTrivia" Type="SyntaxTriviaList">
      <Comment>
        <summary>
          Gets the list of trivia that appears before this node in the source
          code.
        </summary>
      </Comment>
    </Member>
    <Member Name="TrailingTrivia" Type="SyntaxTriviaList">
      <Comment>
        <summary>
          Gets the list of trivia that appears before this node in the source
          code.
        </summary>
      </Comment>
    </Member>
  </RootNode>
  <AbstractNode Type="ExpressionSyntax" Base="SyntaxNode">
    <Comment>
      <summary>
        Defines a record from which expression nodes are derived.
      </summary>
    </Comment>
  </AbstractNode>
  <Node Type="PrefixUnaryExpressionSyntax" Base="ExpressionSyntax">
    <Comment>
      <summary>
        Defines a record representing a prefix unary expression.
      </summary>
    </Comment>

    <Kind Name="BitwiseNotExpression" />
    <Kind Name="LogicalNotExpression" />
    <Kind Name="UnaryMinusExpression" />
    <Kind Name="PreIncrementExpression" />
    <Kind Name="PreDecrementExpression" />
    <Kind Name="DereferenceExpression" />
    <Kind Name="AddressOfExpression" />

    <Member Name="OperatorToken" Type="SyntaxToken">
      <Comment>
        <summary>
          Gets the <see cref="SyntaxToken" /> representing the kind of operator
          of the prefix unary expression.
        </summary>
      </Comment>
    </Member>
    <Member Name="Operand" Type="ExpressionSyntax">
      <Comment>
        <summary>
          Gets the <see cref="ExpressionSyntax" /> representing the operand of
          the prefix unary expression.
        </summary>
      </Comment>

      <Kind Name="ExclamationToken" />
      <Kind Name="TildeToken" />
      <Kind Name="MinusToken" />
      <Kind Name="PlusPlusToken" />
      <Kind Name="MinusMinusToken" />
      <Kind Name="AsteriskToken" />
      <Kind Name="AmpersandToken" />
    </Member>
  </Node>
  <Node Type="PostfixUnaryExpressionSyntax" Base="ExpressionSyntax">
    <Comment>
      <summary>
        Defines a record representing a postfix unary expression.
      </summary>
    </Comment>

    <Kind Name="PostIncrementExpression" />
    <Kind Name="PostDecrementExpression" />

    <Member Name="Operand" Type="ExpressionSyntax">
      <Comment>
        <summary>
          Gets the <see cref="ExpressionSyntax" /> representing the operand of
          the postfix unary expression.
        </summary>
      </Comment>
    </Member>
    <Member Name="OperatorToken" Type="SyntaxToken">
      <Comment>
        <summary>
          Gets the <see cref="ExpressionSyntax" /> representing the operand of
          the postfix unary expression.
        </summary>
      </Comment>

      <Kind Name="PlusPlusToken" />
      <Kind Name="MinusMinusToken" />
    </Member>
  </Node>
  <Node Type="BinaryExpressionSyntax" Base="ExpressionSyntax">
    <Comment>
      <summary>
        Defines a record representing a binary expression.
      </summary>
    </Comment>

    <Kind Name="ExponentiationExpression" />

    <Kind Name="MultiplyExpression" />
    <Kind Name="DivideExpression" />
    <Kind Name="IntegerModuloExpression" />
    <Kind Name="FloatModuloExpression" />

    <Kind Name="AddExpression" />
    <Kind Name="SubtractExpression" />

    <Kind Name="LessThanExpression" />
    <Kind Name="LessThanOrEqualExpression" />
    <Kind Name="GreaterThanExpression" />
    <Kind Name="GreaterThanOrEqualExpression" />

    <Kind Name="LeftShiftExpression" />
    <Kind Name="RightShiftExpression" />

    <Kind Name="EqualsExpression" />
    <Kind Name="NotEqualsExpression" />
    <Kind Name="EquivalentExpression" />
    <Kind Name="NotEquivalentExpression" />

    <Kind Name="BitwiseAndExpression" />
    <Kind Name="ExclusiveOrExpression" />
    <Kind Name="BitwiseOrExpression" />

    <Kind Name="LogicalAndExpression" />
    <Kind Name="LogicalOrExpression" />

    <Kind Name="InExpression" />

    <Member Name="Left" Type="ExpressionSyntax">
      <Comment>
        <summary>
          Gets the <see cref="ExpressionSyntax" /> node representing the
          expression on the left of the binary operator.
        </summary>
      </Comment>
    </Member>
    <Member Name="OperatorToken" Type="SyntaxToken">
      <Comment>
        <summary>
          Gets the <see cref="SyntaxToken" /> representing the kind of operator
          in the member access expression.
        </summary>
      </Comment>

      <Kind Name="AsteriskAsteriskToken" />

      <Kind Name="AsteriskToken" />
      <Kind Name="SlashToken" />
      <Kind Name="PercentToken" />
      <Kind Name="PercentPercentToken" />

      <Kind Name="PlusToken" />
      <Kind Name="MinusToken" />

      <Kind Name="LessThanToken" />
      <Kind Name="LessThanEqualsToken" />
      <Kind Name="GreaterThanToken" />
      <Kind Name="GreaterThanEqualsToken" />

      <Kind Name="DoubleLessThanToken" />
      <Kind Name="DoubleGreaterThanToken" />

      <Kind Name="DoubleEqualsToken" />
      <Kind Name="ExclamationEqualsToken" />
      <Kind Name="LessThanGreaterThanToken" />
      <Kind Name="TildeEqualsToken" />
      <Kind Name="TildeExclamationToken" />

      <Kind Name="AmpersandToken" />
      <Kind Name="CaretToken" />
      <Kind Name="BarToken" />

      <Kind Name="DoubleAmpersandToken" />
      <Kind Name="DoubleBarToken" />

      <Kind Name="InKeyword" />
    </Member>
    <Member Name="Right" Type="ExpressionSyntax">
      <Comment>
        <summary>
          Gets the <see cref="ExpressionSyntax" /> node representing the
          expression on the right of the binary operator.
        </summary>
      </Comment>
    </Member>
  </Node>
  <Node Type="ConditionalExpressionSyntax" Base="ExpressionSyntax">
    <Comment>
      <summary>
        Defines a record representing a ternary expression.
      </summary>
    </Comment>

    <Kind Name="ConditionalExpression" />

    <Member Name="Condition" Type="ExpressionSyntax">
      <Comment>
        <summary>
          Gets the <see cref="ExpressionSyntax" /> node representing the
          condition of the conditional expression.
        </summary>
      </Comment>
    </Member>
    <Member Name="QuestionToken" Type="SyntaxToken">
      <Kind Name="QuestionToken" />
      <Comment>
        <summary>
          Gets the <see cref="SyntaxToken" /> representing the question mark.
        </summary>
      </Comment>
    </Member>
    <Member Name="WhenTrue" Type="ExpressionSyntax">
      <Comment>
        <summary>
          Gets the <see cref="ExpressionSyntax" /> node representing the
          expression to be evaluated when the condition is true.
        </summary>
      </Comment>
    </Member>
    <Member Name="ColonToken" Type="SyntaxToken">
      <Kind Name="ColonToken" />
      <Comment>
        <summary>
          Gets the <see cref="SyntaxToken" /> representing the colon.
        </summary>
      </Comment>
    </Member>
    <Member Name="WhenFalse" Type="ExpressionSyntax">
      <Comment>
        <summary>
          Gets the <see cref="ExpressionSyntax" /> node representing the
          expression to be evaluated when the condition is false.
        </summary>
      </Comment>
    </Member>
  </Node>

  <Node Type="CompilationUnitSyntax" Base="SyntaxNode">
    <Comment>
      <summary>
        Defines a record representing a compilation unit.
      </summary>
    </Comment>
    <Kind Name="CompilationUnit" />
  </Node>
</Grammar>
